{"version":3,"sources":["media-query/break-points.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;AASxC;;;;GAIG;AAEH;IAGE;;OAEG;IACH;QACE,IAAI,CAAC,QAAQ,GAAG;YACd,EAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAC;YAChE,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,+BAA+B,EAAC;YAC5F;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,+BAA+B;aAC5C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,sDAAsD;aACnE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,+BAA+B;aAC5C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,uDAAuD;aACpE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,gCAAgC;aAC7C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,wDAAwD;aACrE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,gCAAgC;aAC7C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,gCAAgC;aAC7C;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,sCAAgB,GAAhB,UAAiB,KAAa;QAC5B,GAAG,CAAC,CAAW,UAAa,EAAb,KAAA,IAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,CAAC;YAAxB,IAAI,EAAE,SAAA;YACT,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,EAAE,CAAC;YACZ,CAAC;SACF;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAMD,sBAAI,qCAAY;QAJhB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,WAAW,IAAI,IAAI,EAAtB,CAAsB,CAAC,CAAC;QAC5D,CAAC;;;OAAA;IAKD,sBAAI,gCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IAKD,sBAAI,iCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,EAAT,CAAS,CAAC,CAAC;QAC5C,CAAC;;;OAAA;IA9FH;QAAC,UAAU,EAAE;;mBAAA;IA+Fb,kBAAC;AAAD,CA9FA,AA8FC,IAAA","file":"break-points.js","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\nexport interface BreakPoint {\r\n  mediaQuery: string;\r\n  overlapping: boolean;\r\n  suffix: string;\r\n  alias: string;\r\n}\r\n\r\n/**\r\n * Registry of 1..n MediaQuery breakpoint ranges\r\n * This is published as a provider and may be overriden from custom, application-specific ranges\r\n *\r\n */\r\n@Injectable()\r\nexport class BreakPoints {\r\n  public registry: Array<BreakPoint>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    this.registry = [\r\n      {alias: '', suffix: '', overlapping: true, mediaQuery: 'screen'},\r\n      {alias: 'xs', suffix: 'Xs', overlapping: false, mediaQuery: 'screen and (max-width: 599px)'},\r\n      {\r\n        alias: 'gt-xs',\r\n        suffix: 'GtXs',\r\n        overlapping: true,\r\n        mediaQuery: 'screen and (min-width: 600px)'\r\n      },\r\n      {\r\n        alias: 'sm',\r\n        suffix: 'Sm',\r\n        overlapping: false,\r\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)'\r\n      },\r\n      {\r\n        alias: 'gt-sm',\r\n        suffix: 'GtSm',\r\n        overlapping: true,\r\n        mediaQuery: 'screen and (min-width: 960px)'\r\n      },\r\n      {\r\n        alias: 'md',\r\n        suffix: 'Md',\r\n        overlapping: false,\r\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)'\r\n      },\r\n      {\r\n        alias: 'gt-md',\r\n        suffix: 'GtMd',\r\n        overlapping: true,\r\n        mediaQuery: 'screen and (min-width: 1280px)'\r\n      },\r\n      {\r\n        alias: 'lg',\r\n        suffix: 'Lg',\r\n        overlapping: false,\r\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)'\r\n      },\r\n      {\r\n        alias: 'gt-lg',\r\n        suffix: 'GtLg',\r\n        overlapping: true,\r\n        mediaQuery: 'screen and (min-width: 1920px)'\r\n      },\r\n      {\r\n        alias: 'xl',\r\n        suffix: 'Xl',\r\n        overlapping: false,\r\n        mediaQuery: 'screen and (min-width: 1920px)'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  findBreakpointBy(alias: string): BreakPoint {\r\n    for (let bp of this.registry) {\r\n      if (bp.alias == alias) {\r\n        return bp;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\r\n   * e.g. gt-sm overlaps md, lg, and xl\r\n   */\r\n  get overlappings(): Array<BreakPoint> {\r\n    return this.registry.filter(it => it.overlapping == true);\r\n  }\r\n\r\n  /**\r\n   * Get list of all registered (non-empty) breakpoint aliases\r\n   */\r\n  get aliases(): Array<string> {\r\n    return this.registry.map(it => it.alias);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get suffixes(): Array<string> {\r\n    return this.registry.map(it => it.suffix);\r\n  }\r\n}\r\n"]}