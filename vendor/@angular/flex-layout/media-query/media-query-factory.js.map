{"version":3,"sources":["media-query/media-query-factory.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAC,MAAM,iBAAiB;AAwBzC,mEAAmE;AACnE,mEAAmE;AAEnE;;;GAGG;AACH,IAAM,UAAU,GAAG,EAAE,CAAC;AAEtB;;;GAGG;AACH;IAAA;IAiBA,CAAC;IAhBC;;;OAGG;IACI,gCAAU,GAAjB,UAAkB,KAAa;QAC7B,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC;QAEhE,OAAO,CAAC,KAAK,CAAC,CAAC;QAEf,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAmB;YAC5D,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE;YACxC,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,cAAO,CAAC;YACrB,cAAc,EAAE,cAAO,CAAC;SACzB,CAAC;IACJ,CAAC;IACH,4BAAC;AAAD,CAjBA,AAiBC,IAAA;AAGD;;;;;;GAMG;AACH,iBAAiB,KAAK;IACpB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC;YACH,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE5C,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,OAAO,GAAG,YAAU,KAAK,0BAAuB,CAAC;gBACrD,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,CAAC;YAED,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAE5D,mCAAmC;YACnC,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QAE5B,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;IACH,CAAC;AACH,CAAC","file":"media-query-factory.js","sourcesContent":["import {isDefined} from '../utils/global';\r\n\r\n// ****************************************************************\r\n// Exported Types and Interfaces\r\n// ****************************************************************\r\n\r\n/**\r\n * EventHandler callback with the mediaQuery [range] activates or deactivates\r\n */\r\nexport interface MediaQueryListListener {\r\n  // Function with Window's MediaQueryList argument\r\n  (mql: MediaQueryList): void;\r\n}\r\n\r\n/**\r\n * EventDispatcher for a specific mediaQuery [range]\r\n */\r\nexport interface MediaQueryList {\r\n  readonly matches: boolean;\r\n  readonly media: string;\r\n  addListener(listener: MediaQueryListListener): void;\r\n  removeListener(listener: MediaQueryListListener): void;\r\n}\r\n\r\n// ****************************************************************\r\n// ****************************************************************\r\n\r\n/**\r\n * Private global registry for all dynamically-created, injected style tags\r\n * @see prepare(query)\r\n */\r\nconst ALL_STYLES = {};\r\n\r\n/**\r\n * Factory class used to quickly create a mq listener for a specified mediaQuery range\r\n * No need to implement polyfill\r\n */\r\nexport class MediaQueryListFactory {\r\n  /**\r\n   * Return a MediaQueryList for the specified media query\r\n   * Publish a mockMQL if needed\r\n   */\r\n  static instanceOf(query: string): MediaQueryList {\r\n    let canListen = isDefined(window.matchMedia('all').addListener);\r\n\r\n    prepare(query);\r\n\r\n    return canListen ? window.matchMedia(query) : <MediaQueryList>{\r\n      matches: query === 'all' || query === '',\r\n      media: query,\r\n      addListener: () => {},\r\n      removeListener: () => {}\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener\r\n * when there is at least one CSS selector for the respective media query.\r\n *\r\n * @param query string The mediaQuery used to create a faux CSS selector\r\n *\r\n */\r\nfunction prepare(query) {\r\n  if (!ALL_STYLES[query]) {\r\n    try {\r\n      let style = document.createElement('style');\r\n\r\n      style.setAttribute('type', 'text/css');\r\n      if (!style['styleSheet']) {\r\n        let cssText = `@media ${query} {.ngl-query-test{ }}`;\r\n        style.appendChild(document.createTextNode(cssText));\r\n      }\r\n\r\n      document.getElementsByTagName('head')[0].appendChild(style);\r\n\r\n      // Store in private global registry\r\n      ALL_STYLES[query] = style;\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n}\r\n"]}