{"version":3,"sources":["media-query/media-queries.ts"],"names":[],"mappings":"AAAA,wCAAwC;;;;;;;;;;OAEjC,0BAA0B;OAC1B,uBAAuB;OAEvB,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe;OACzC,EAAC,eAAe,EAAC,MAAM,sBAAsB;OAG7C,EAAC,SAAS,EAAC,MAAM,iBAAiB;OAElC,EAAa,WAAW,EAAC,MAAM,gBAAgB;OAC/C,EAAiB,qBAAqB,EAAC,MAAM,uBAAuB;AAE3E,mEAAmE;AACnE,gCAAgC;AAChC,mEAAmE;AAEnE;;GAEG;AACH;IACE,0BACW,OAAgB,EAAM,gCAAgC;QACtD,OAAe,EAAO,0BAA0B;QAChD,MAAmB,EAAG,wBAAwB;QAC9C,KAAkB,CAAI,6CAA6C;;QAD1E,sBAA0B,GAA1B,WAA0B;QAC1B,qBAAyB,GAAzB,UAAyB;QAHlB,YAAO,GAAP,OAAO,CAAS;QAChB,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAa;QACnB,UAAK,GAAL,KAAK,CAAa;IACtB,CAAC;IACV,uBAAC;AAAD,CAPA,AAOC,IAAA;AAED,mEAAmE;AACnE,mEAAmE;AAInE;IAME;;OAEG;IACH,sBAAY,WAAwB,EAAU,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QARnD,UAAK,GAAQ,EAAE,CAAC;QAStB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAmB,IAAI,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACrF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QAE9C,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAKD,sBAAI,qCAAW;QAHf;;WAEG;aACH;YACE,MAAM,CAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,QAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,sBAAI,wCAAc;aAAlB;YAAA,iBAKC;YAJC,IAAI,KAAK,GAAsB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YACxE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,EAAc;gBACjC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;YAC3C,CAAC,CAAC,CAAA;QACJ,CAAC;;;OAAA;IAED,sBAAI,gCAAM;aAAV;YAAA,iBAYC;YAXC,IAAI,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YACrD,KAAK,CAAC,OAAO,CAAC,UAAA,EAAE;gBACd,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;oBACpB,IAAI,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;oBACpC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC;wBACxB,KAAK,GAAG,EAAE,CAAC;gBACf,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;QACxE,CAAC;;;OAAA;IAED;;OAEG;IACH,+BAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;gBACd,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,8BAAO,GAAP,UAAQ,KAAc;QACpB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC;YAC7B,MAAM,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,sCAAe,GAAvB,UAAwB,MAAyB;QAAjD,iBAkBC;QAjBC,MAAM,CAAC,OAAO,CAAC,UAAC,EAAc;YAC5B,IAAI,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,GAAG,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;gBAExD,mFAAmF;gBACnF,gCAAgC;gBAEhC,GAAG,CAAC,WAAW,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,EAAE,EAAE,CAAC,CAAC,CAAC;gBAChD,KAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;gBAEhC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;oBAChB,kDAAkD;oBAClD,KAAI,CAAC,UAAU,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBAC3B,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,iCAAU,GAAlB,UAAmB,UAAsB,EAAE,GAAmB;QAA9D,iBAMC;QALC,sDAAsD;QACtD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,SAAO,UAAU,CAAC,KAAK,qBAAgB,GAAG,CAAC,OAAO,MAAG,CAAC,CAAC;YACnE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAA;IACJ,CAAC;IAtGH;QAAC,UAAU,EAAE;;oBAAA;IAuGb,mBAAC;AAAD,CAtGA,AAsGC,IAAA","file":"media-queries.js","sourcesContent":["// RxJS Operators used by the classes...\r\n\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport {Injectable, NgZone} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\nimport {isDefined} from '../utils/global';\r\n\r\nimport {BreakPoint, BreakPoints} from './break-points';\r\nimport {MediaQueryList, MediaQueryListFactory} from './media-query-factory';\r\n\r\n// ****************************************************************\r\n// Exported Types and Interfaces\r\n// ****************************************************************\r\n\r\n/**\r\n * Class instances emitted [to observers] for each mql notification\r\n */\r\nexport class MediaQueryChange {\r\n  constructor(\r\n      public matches: boolean,     // Is the mq currently activated\r\n      public mqAlias: string,      // e.g.   gt-sm, md, gt-lg\r\n      public suffix: string = '',  // e.g.   GtSM, Md, GtLg\r\n      public value: string = ''    // @Input value associated for the current mq\r\n      ) {}\r\n}\r\n\r\n// ****************************************************************\r\n// ****************************************************************\r\n\r\n\r\n@Injectable()\r\nexport class MediaQueries {\r\n  private _mqls: any = {};\r\n  private _breakpoints: BreakPoints;\r\n  private _source: BehaviorSubject<MediaQueryChange>;\r\n  private _announcer: Observable<MediaQueryChange>;\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor(breakpoints: BreakPoints, private _zone: NgZone) {\r\n    this._breakpoints = breakpoints;\r\n    this._source = new BehaviorSubject<MediaQueryChange>(new MediaQueryChange(true, ''));\r\n    this._announcer = this._source.asObservable();\r\n\r\n    this.prepareWatchers(breakpoints.registry);\r\n  }\r\n\r\n  /**\r\n   * Read-only accessor to the list of breakpoints configured in the BreakPoints provider\r\n   */\r\n  get breakpoints(): Array<BreakPoint> {\r\n    return [...this._breakpoints.registry];\r\n  }\r\n\r\n  get activeOverlaps(): Array<BreakPoint> {\r\n    let items: Array<BreakPoint> = this._breakpoints.overlappings.reverse();\r\n    return items.filter((bp: BreakPoint) => {\r\n      return this._mqls[bp.mediaQuery].matches;\r\n    })\r\n  }\r\n\r\n  get active(): BreakPoint {\r\n    let found = null, items = this.breakpoints.reverse();\r\n    items.forEach(bp => {\r\n      if (bp.alias !== '') {\r\n        let mql = this._mqls[bp.mediaQuery];\r\n        if (mql.matches && !found)\r\n          found = bp;\r\n      }\r\n    });\r\n\r\n    let first = this.breakpoints[0];\r\n    return found || (this._mqls[first.mediaQuery].matches ? first : null);\r\n  }\r\n\r\n  /**\r\n   * For the specified mediaQuery alias, is the mediaQuery range active?\r\n   */\r\n  isActive(alias: string): boolean {\r\n    let bp = this._breakpoints.findBreakpointBy(alias);\r\n    if (bp) {\r\n      let mql = this._mqls[bp.mediaQuery];\r\n      if (mql.matches)\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * External observers can watch for all (or a specific) mql changes.\r\n   * Typically used by the MediaQueryAdaptor; optionally available to components\r\n   * use the MediaQueries as $mdMedia service\r\n   */\r\n  observe(alias?: string): Observable<MediaQueryChange> {\r\n    return this._announcer.filter(e => {\r\n      return !isDefined(alias) ? (e.matches === true) : (e.mqAlias === alias);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Based on the BreakPoints provider, register internal listeners for the specified ranges\r\n   */\r\n  private prepareWatchers(ranges: Array<BreakPoint>) {\r\n    ranges.forEach((it: BreakPoint) => {\r\n      let mql = this._mqls[it.mediaQuery];\r\n      if (!mql) {\r\n        mql = MediaQueryListFactory.instanceOf((it.mediaQuery));\r\n\r\n        // Each listener uses a shared eventHandler: which emits specific data to observers\r\n        // Cache this permanent listener\r\n\r\n        mql.addListener(this.onMQLEvent.bind(this, it));\r\n        this._mqls[it.mediaQuery] = mql;\r\n\r\n        if (mql.matches) {\r\n          // Announce activate range for initial subscribers\r\n          this.onMQLEvent(it, mql);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On each mlq event, emit a special MediaQueryChange to all subscribers\r\n   */\r\n  private onMQLEvent(breakpoint: BreakPoint, mql: MediaQueryList) {\r\n    // Execute within ng2 zone from change detection, etc.\r\n    this._zone.run(() => {\r\n      console.log(`mq[ ${breakpoint.alias} ]: active = ${mql.matches} `);\r\n      this._source.next(new MediaQueryChange(mql.matches, breakpoint.alias, breakpoint.suffix));\r\n    })\r\n  }\r\n}\r\n"]}