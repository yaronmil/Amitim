{"version":3,"sources":["flexbox/media-query/media-query-adapter.ts"],"names":[],"mappings":"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","file":"media-query-adapter.js","sourcesContent":["import {Directive, Injectable, NgZone} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\nimport {BreakPoints} from '../../media-query/break-points';\r\nimport {MediaQueries, MediaQueryChange} from '../../media-query/media-queries';\r\nimport {isDefined} from '../../utils/global';\r\n\r\nimport {MediaQueryActivation} from './media-query-activation';\r\nimport {MediaQueryChanges, MediaQuerySubscriber} from './media-query-changes';\r\n\r\nexport declare type SubscriptionList = Array<Subscription>;\r\n\r\nconst ON_DESTROY = 'ngOnDestroy';\r\nconst ON_MEDIA_CHANGES = 'onMediaQueryChanges';\r\n\r\n/**\r\n *  Adapter between Layout API directives and the MediaQueries mdl service\r\n *\r\n *  Using this adapter encapsulates most of the complexity of mql subscriptions\r\n *  and insures lean integration-code in the Layout directives\r\n *\r\n */\r\n@Injectable()\r\nexport class MediaQueryAdapter {\r\n  private _mq: MediaQueries;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(private _breakpoints: BreakPoints, zone: NgZone) {\r\n    this._mq = new MediaQueries(_breakpoints, zone);\r\n  }\r\n\r\n  /**\r\n   * Create a custom MQ Activation instance for each directive instance; the activation object\r\n   * tracks the current mq-activated input and manages the calls to the directive's\r\n   * `onMediaQueryChanges( )`\r\n   */\r\n  attach(directive: Directive, property: string, defaultVal: string|number): MediaQueryActivation {\r\n    let activation: MediaQueryActivation =\r\n        new MediaQueryActivation(this._mq, directive, property, defaultVal);\r\n    let list: SubscriptionList = this._linkOnMediaChanges(directive, property);\r\n\r\n    this._listenOnDestroy(directive, list);\r\n\r\n    return activation;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _linkOnMediaChanges(directive: Directive, property: string) {\r\n    let list: SubscriptionList = [], handler: MediaQuerySubscriber = directive[ON_MEDIA_CHANGES];\r\n\r\n    if (handler) {\r\n      let keys = this._buildRegistryMap(directive, property);\r\n      list = this._configureChangeObservers(directive, keys, handler);\r\n    }\r\n    return list;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _listenOnDestroy(directive: Directive, subscribers: SubscriptionList) {\r\n    let onDestroyFn = directive[ON_DESTROY];\r\n    if (onDestroyFn) {\r\n      directive[ON_DESTROY] = function() {\r\n        // Unsubscribe all for this directive\r\n        subscribers.forEach((s: Subscription) => {\r\n          s.unsubscribe();\r\n        });\r\n        onDestroyFn();\r\n\r\n        // release array and restore original fn\r\n        subscribers.length = 0;\r\n        directive[ON_DESTROY] = onDestroyFn\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined\r\n   */\r\n  private _buildRegistryMap(directive: Directive, key: string) {\r\n    return this._breakpoints.registry\r\n        .map(it => {\r\n          return {\r\n            alias: it.alias,      // e.g.  gt-sm, md, gt-lg\r\n            key: key + it.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\r\n          }\r\n        })\r\n        .filter(it => isDefined(directive[it.key]));\r\n  }\r\n  /**\r\n   * For each API property, register a callback to `onMediaQueryChanges( )`(e:MediaQueryEvent)\r\n   * Cache 1..n subscriptions for internal auto-unsubscribes during the directive ngOnDestory()\r\n   * notification\r\n   */\r\n  private _configureChangeObservers(\r\n      directive: Directive, keys: any, subscriber: MediaQuerySubscriber): SubscriptionList {\r\n    let subscriptions = [];\r\n\r\n    keys.forEach(it => {\r\n      // Only subscribe if the directive API is defined (in use)\r\n      if (isDefined(directive[it.key])) {\r\n        let lastEvent: MediaQueryChange,\r\n            mergeWithLastEvent = (current: MediaQueryChange):\r\n                MediaQueryChanges => {\r\n                  let previous = lastEvent;\r\n                  if (this._isDifferentChange(previous, current))\r\n                    lastEvent = current;\r\n\r\n                  return new MediaQueryChanges(previous, current);\r\n                },\r\n            // Create subscription for mq changes for each alias (e.g. gt-sm, md, etc)\r\n            subscription = this._mq.observe(it.alias).map(mergeWithLastEvent).subscribe(subscriber);\r\n\r\n        subscriptions.push(subscription);\r\n      }\r\n    });\r\n\r\n    return subscriptions;\r\n  }\r\n\r\n  /**\r\n   * Is the current activation event different from the last activation event ?\r\n   *\r\n   * !! change events may arrive out-of-order (activate before deactivate)\r\n   *    so make sure the deactivate is used ONLY when the keys match\r\n   *    (since a different activate may be in use)\r\n   *\r\n   */\r\n  private _isDifferentChange(previous: MediaQueryChange, current: MediaQueryChange): boolean {\r\n    let prevAlias = (previous ? previous.mqAlias : '');\r\n    return current.matches || (!current.matches && current.mqAlias !== prevAlias);\r\n  }\r\n}\r\n"]}